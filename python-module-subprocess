<!DOCTYPE html>


  <html class="light page-post">


<head>
  <meta charset="utf-8">
  
  <title>Python模块-执行系统命令 | Hugo&#39;s Note</title>

  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

  
    <meta name="keywords" content="Python,subprocess," />
  

  <meta name="description" content="Python可以在运行中执行系统命令的模块有很多，类似于实现python多进程的一种，其中有模块已经被弃用，有以下这些：">
<meta property="og:type" content="article">
<meta property="og:title" content="Python模块-执行系统命令">
<meta property="og:url" content="https://fenghuji.github.io/python-module-subprocess">
<meta property="og:site_name" content="Hugo&#39;s Note">
<meta property="og:description" content="Python可以在运行中执行系统命令的模块有很多，类似于实现python多进程的一种，其中有模块已经被弃用，有以下这些：">
<meta property="og:locale" content="en_US">
<meta property="article:published_time" content="2019-10-14T16:00:00.000Z">
<meta property="article:modified_time" content="2019-10-14T16:00:00.000Z">
<meta property="article:author" content="Hugo Ji">
<meta property="article:tag" content="Python">
<meta property="article:tag" content="subprocess">
<meta name="twitter:card" content="summary">

  

  
    <link rel="icon" href="/favicon.ico">
  

  <link href="/css/styles.css?v=c114cbeddx" rel="stylesheet">


  
    
<link rel="stylesheet" href="/css/personal-style.css">

  

  
<!-- Google Analytics -->
<script type="text/javascript">
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-154715039-1', 'auto');
ga('send', 'pageview');

</script>
<!-- End Google Analytics -->


  

  


  
    <script async src="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"></script>
    <link rel="stylesheet" href="//cdn.bootcss.com/font-awesome/4.3.0/css/font-awesome.min.css">
  

<!-- hexo injector head_end start -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css">

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/hexo-math@4.0.0/dist/style.css">
<!-- hexo injector head_end end --><meta name="generator" content="Hexo 5.3.0"></head>

<body>


  
    <span id="toolbox-mobile" class="toolbox-mobile">盒子</span>
  

  <div class="post-header CENTER">
   
  <div class="toolbox">
    <a class="toolbox-entry" href="/">
      <span class="toolbox-entry-text">盒子</span>
      <i class="icon-angle-down"></i>
      <i class="icon-home"></i>
    </a>
    <ul class="list-toolbox">
      
        <li class="item-toolbox">
          <a
            class="CIRCLE"
            href="/archives/"
            rel="noopener noreferrer"
            target="_self"
            >
            博客
          </a>
        </li>
      
        <li class="item-toolbox">
          <a
            class="CIRCLE"
            href="/category/"
            rel="noopener noreferrer"
            target="_self"
            >
            分类
          </a>
        </li>
      
        <li class="item-toolbox">
          <a
            class="CIRCLE"
            href="/tag/"
            rel="noopener noreferrer"
            target="_self"
            >
            标签
          </a>
        </li>
      
        <li class="item-toolbox">
          <a
            class="CIRCLE"
            href="/link/"
            rel="noopener noreferrer"
            target="_self"
            >
            荐读
          </a>
        </li>
      
        <li class="item-toolbox">
          <a
            class="CIRCLE"
            href="/about/"
            rel="noopener noreferrer"
            target="_self"
            >
            关于
          </a>
        </li>
      
    </ul>
  </div>


</div>


  <div id="toc" class="toc-article">
    <strong class="toc-title">Posts List</strong>
    <ol class="toc"><li class="toc-item toc-level-3"><a class="toc-link" href="#commands%E6%A8%A1%E5%9D%97"><span class="toc-text">commands模块</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#Subprocess%E6%A8%A1%E5%9D%97"><span class="toc-text">Subprocess模块</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#call"><span class="toc-text">call</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#check-call"><span class="toc-text">check_call</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#check-output"><span class="toc-text">check_output</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#subprocess-Popen-%E2%80%A6"><span class="toc-text">subprocess.Popen(…)</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95"><span class="toc-text">调用方法</span></a><ol class="toc-child"><li class="toc-item toc-level-5"><a class="toc-link" href="#Popen-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7"><span class="toc-text">Popen 对象的属性</span></a></li><li class="toc-item toc-level-5"><a class="toc-link" href="#Popen%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95"><span class="toc-text">Popen对象的方法</span></a></li></ol></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5"><span class="toc-text">参考链接</span></a></li></ol>
  </div>



<div class="content content-post CENTER">
   <article id="post-Python_subprocess" class="article article-type-post" itemprop="blogPost">
  <header class="article-header">
    <h1 class="post-title">Python模块-执行系统命令</h1>

    <div class="article-meta">
      <span>
        <i class="icon-calendar"></i>
        <span>2019.10.15</span>
      </span>

      
        <span class="article-author">
          <i class="icon-user"></i>
          <span>Hugo Ji</span>
        </span>
      

      
  <span class="article-category">
    <i class="icon-list"></i>
    <a class="article-category-link" href="/categories/Python/">Python</a>
  </span>



      

      
      <i class="fa fa-eye"></i> 
        <span id="busuanzi_container_page_pv">
           &nbsp热度 <span id="busuanzi_value_page_pv">
           <i class="fa fa-spinner fa-spin"></i></span>℃
        </span>
      
      
    </div>
  </header>

  <div class="article-content">
    
      <p>Python可以在运行中执行系统命令的模块有很多，类似于实现python多进程的一种，其中有模块已经被弃用，有以下这些：   </p>
<a id="more"></a>
<ul>
<li>os.system</li>
<li>os.spawn</li>
<li>os.popen * –废弃 </li>
<li>popen2 * –废弃 </li>
<li>commands * –废弃，3.x中被移除 </li>
<li>subprocess</li>
</ul>
<p><strong>以下主要记录commands模块和subprocess模块</strong>   </p>
<h3 id="commands模块"><a href="#commands模块" class="headerlink" title="commands模块"></a>commands模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> commands</span><br><span class="line"></span><br><span class="line">result = commands.getoutput(<span class="string">&#x27;cmd&#x27;</span>)</span><br><span class="line">result = commands.getstatus(<span class="string">&#x27;cmd&#x27;</span>)</span><br><span class="line">result = commands.getstatusoutput(<span class="string">&#x27;cmd&#x27;</span>)</span><br><span class="line">(status, out) = commands.getstatusoutput(<span class="string">&#x27;cmd&#x27;</span> + <span class="string">&#x27; 2&gt;&amp;1&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p> 以上执行shell命令的相关的模块和函数的功能均在 subprocess 模块中实现，并提供了更丰富的功能。    </p>
<h3 id="Subprocess模块"><a href="#Subprocess模块" class="headerlink" title="Subprocess模块"></a>Subprocess模块</h3><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><p>执行shell命令并返回状态值   </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ret = subprocess.call([<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;-l&quot;</span>], shell=<span class="literal">False</span>)</span><br><span class="line">ret = subprocess.call(<span class="string">&quot;ls -l&quot;</span>, shell=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p> shell = True ，允许 shell 命令是字符串形式    </p>
<h4 id="check-call"><a href="#check-call" class="headerlink" title="check_call"></a>check_call</h4><p> 执行命令，如果执行状态码是 0 ，则返回0，否则抛异常    </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">subprocess.check_call([<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;-l&quot;</span>])</span><br><span class="line">subprocess.check_call(<span class="string">&quot;exit 1&quot;</span>, shell=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<h4 id="check-output"><a href="#check-output" class="headerlink" title="check_output"></a>check_output</h4><p> 执行命令，如果状态码是 0 ，则返回执行结果，否则抛异常    </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">subprocess.check_output([<span class="string">&quot;echo&quot;</span>, <span class="string">&quot;Hello World!&quot;</span>])</span><br><span class="line">subprocess.check_output(<span class="string">&quot;exit 1&quot;</span>, shell=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<h4 id="subprocess-Popen-…"><a href="#subprocess-Popen-…" class="headerlink" title="subprocess.Popen(…)"></a>subprocess.Popen(…)</h4><h4 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subprocess.Popen(args, bufsize=<span class="number">0</span>, executable=<span class="literal">None</span>, stdin=<span class="literal">None</span>, stdout=<span class="literal">None</span>, stderr=<span class="literal">None</span>, preexec_fn=<span class="literal">None</span>, close_fds=<span class="literal">False</span>, shell=<span class="literal">False</span>, cwd=<span class="literal">None</span>, env=<span class="literal">None</span>, universal_newlines=<span class="literal">False</span>, startupinfo=<span class="literal">None</span>, creationflags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p> <strong>创建并返回一个子进程</strong>，并在这个进程中执行指定的程序。    </p>
<p><strong>参数介绍</strong>   </p>
<ul>
<li><strong>args</strong>：要执行的命令或可执行文件的路径。一个由字符串组成的序列（通常是列表），列表的第一个元素是可执行程序的路径，剩下的是传给这个程序的参数，如果没有要传给这个程序的参数，args 参数可以仅仅是一个字符串。   </li>
<li><strong>bufsize</strong>：控制 <em>stdin</em>, <em>stdout</em>, <em>stderr</em> 等参数指定的文件的缓冲，和打开文件的 open()函数中的参数 <em>bufsize</em> 含义相同，0 无缓冲,1 行缓冲,其他 缓冲区大小,负值 系统缓冲    </li>
<li><strong>executable</strong>：如果这个参数不是 None，将替代参数 args 作为可执行程序；   </li>
<li><strong>stdin</strong>：指定子进程的标准输入；   </li>
<li><strong>stdout</strong>：指定子进程的标准输出；   </li>
<li><strong>stderr</strong>：指定子进程的标准错误输出；   </li>
<li><strong>preexec_fn</strong>：只在Unix平台下有效，用于指定一个可执行对象（callable object），它将在子进程运行之前被调用    </li>
<li><strong>close_sfs</strong>：在windows平台下，如果close_fds被设置为True，则新创建的子进程将不会继承父进程的输入、输出、错误管道。所以不能将close_fds设置为True同时重定向子进程的标准输入、输出与错误(stdin, stdout, stderr)。    </li>
<li><strong>shell</strong>：同上    </li>
<li><strong>cwd</strong>：用于设置子进程的当前目录    </li>
<li><strong>env</strong>：用于指定子进程的环境变量。如果env = None，子进程的环境变量将从父进程中继承。 </li>
<li><strong>universal_newlines</strong>：不同系统的换行符不同，True -&gt; 同意使用 \n    </li>
<li>startupinfo与createionflags只在windows下有效<br>将被传递给底层的CreateProcess()函数，用于设置子进程的一些属性，如：主窗口的外观，进程的优先级等等 </li>
</ul>
<p>对于 <em>stdin, stdout</em> 和 <em>stderr</em> 而言，如果他们是 None（默认情况），那么子进程使用和父进程相同的标准流文件。    </p>
<p>父进程如果想要和子进程通过 communicate() 方法通信，<strong>对应的参数必须是 subprocess.PIPE</strong>    </p>
<p>当然 <em>stdin, stdout</em> 和 <em>stderr</em> 也可以是已经打开的 file 对象，前提是以合理的方式打开，比如 <em>stdin</em> 对应的文件必须要可读等。　  </p>
<p>同 Linux 中创建子进程类似，父进程创建完子进程后，并不会自动等待子进程执行，父进程在子进程之前推出将导致子进程成为孤儿进程，孤儿进程统一由 <code>init</code> 进程接管，负责其终止后的回收工作。    </p>
<p>如果父进程在子进程之后终止，但子进程终止时父进程没有进行最后的回收工作，子进程残留的数据结构称为僵尸进程。<strong>大量僵尸进程将耗费系统资源</strong>，因此父进程及时等待和回收子进程是必要的，除非能够确认自己比子进程先终止，从而将回收工作过渡给 init 进程。    </p>
<p>创建一个子进程：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = subprocess.Popen(<span class="string">&#x27;ls -l&#x27;</span>, shell=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>total <span class="number">15152</span></span><br><span class="line">-rw-rw-r-- <span class="number">1</span> hugo hugo <span class="number">2755493</span> Oct <span class="number">13</span> <span class="number">20</span>:<span class="number">43</span> hannu-keski-hakuni-vgxIfXwsUAE-unsplash.jpg</span><br><span class="line">-rw-rw-r-- <span class="number">1</span> hugo hugo <span class="number">2864400</span> Oct <span class="number">13</span> <span class="number">20</span>:<span class="number">43</span> kristian-seedorff-BvUicqkaZZ0-unsplash.jpg</span><br><span class="line">-rw-rw-r-- <span class="number">1</span> hugo hugo <span class="number">4888315</span> Oct <span class="number">13</span> <span class="number">20</span>:<span class="number">44</span> lukasz-szmigiel-ps2daRcXYes-unsplash.jpg</span><br><span class="line">-rw-rw-r-- <span class="number">1</span> hugo hugo <span class="number">3747197</span> Oct <span class="number">13</span> <span class="number">20</span>:<span class="number">44</span> patrick-fore-hoxqcGUheeo-unsplash.jpg</span><br><span class="line">-rw-rw-r-- <span class="number">1</span> hugo hugo <span class="number">1251779</span> Oct <span class="number">13</span> <span class="number">20</span>:<span class="number">39</span> timothy-eberly-yuiJO6bvHi4-unsplash.jpg</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.returncode</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.wait()</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.returncode</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>
<h5 id="Popen-对象的属性"><a href="#Popen-对象的属性" class="headerlink" title="Popen 对象的属性"></a><strong>Popen 对象的属性</strong></h5><p> Popen创建的子进程有一些有用的属性，假设 p 是 Popen 创建的子进程，p 的属性包括：    </p>
<p>1.<code>p.pid</code>   子进程的pid   </p>
<p>2.<code>p.returncode</code>   </p>
<p>该属性表示子进程的返回状态，returncode可能有多重情况：   </p>
<ul>
<li>None —— 子进程尚未结束；   </li>
<li>==0 —— 子进程正常退出；   </li>
<li>> 0—— 子进程异常退出，returncode对应于出错码；   </li>
<li>&lt; 0—— 子进程被信号杀掉了。   </li>
</ul>
<p>3.<code>p.stdin, p.stdout, p.stderr</code>:进程对应的一些初始文件，如果调用Popen()的时候对应的参数是subprocess.PIPE，则这里对应的属性是一个包裹了这个管道的 file 对象   </p>
<h5 id="Popen对象的方法"><a href="#Popen对象的方法" class="headerlink" title="Popen对象的方法"></a>Popen对象的方法</h5><p>1.<code>p.poll()</code>   检查子进程  p 是否已经终止，返回 <code>p.returncode</code>属性   </p>
<p>2.<code>p.wait()</code>    等待子进程 p 终止，返回 <code>p.returncode</code>属性；    </p>
<blockquote>
<p><strong>注意</strong>：wait() 立即阻塞父进程，直到子进程结束！ </p>
</blockquote>
<p>3.<code>p.communicate(input=None)</code>      和子进程 p 交流，将参数 <em>input</em> （字符串）中的数据发送到子进程的 stdin，同时从子进程的 stdout 和 stderr 读取数据，直到EOF。    </p>
<p><strong>父进程调用 p.communicate() 和子进程通信有以下限制</strong>：   </p>
<ol>
<li>只能通过管道和子进程通信，也就是说，只有调用 Popen() 创建子进程的时候参数  stdin=subprocess.PIPE，才能通过 p.communicate(input) 向子进程的 stdin 发送数据；只有参数 stout 和 stderr 也都为 subprocess.PIPE ，才能通过p.communicate() 从子进程接收数据，否则接收到的二元组中，对应的位置是None。   </li>
<li>父进程从子进程读到的数据缓存在内存中，因此commucate()不适合与子进程交换过大的数据。   </li>
</ol>
<blockquote>
<p><strong>注意</strong>：communicate() 立即阻塞父进程，直到子进程结束！ </p>
</blockquote>
<p>4.<code>p.send_signal(signal)</code>      向子进程发送信号 <em>signal</em>；    </p>
<p>5.<code>p.terminate()</code>      终止子进程 p ，等于向子进程发送 SIGTERM 信号；    </p>
<p>6.<code>p.kill()</code>      杀死子进程 p ，等于向子进程发送 SIGKILL 信号；    </p>
<p>终端输入的命令分为两种：   </p>
<ul>
<li>输入即可得到输出，如：ifconfig   </li>
<li>输入进行某环境，依赖再输入，如：python   </li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">obj = subprocess.Popen(<span class="string">&quot;mkdir t3&quot;</span>, shell=<span class="literal">True</span>, cwd=<span class="string">&#x27;/home/dev&#x27;</span>,)</span><br></pre></td></tr></table></figure>
<p> 利用communicate()方法来使用PIPE给子进程输入:    </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">child = subprocess.Popen([<span class="string">&quot;cat&quot;</span>], stdin=subprocess.PIPE)</span><br><span class="line">child.communicate(<span class="string">&quot;vamei&quot;</span>)</span><br></pre></td></tr></table></figure>
<p> 我们启动子进程之后，cat会等待输入，直到我们用communicate()输入”vamei”。    </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">ls ~/Downloads |grep jpg$</span></span><br><span class="line"><span class="string">hannu-keski-hakuni-vgxIfXwsUAE-unsplash.jpg</span></span><br><span class="line"><span class="string">kristian-seedorff-BvUicqkaZZ0-unsplash.jpg</span></span><br><span class="line"><span class="string">lukasz-szmigiel-ps2daRcXYes-unsplash.jpg</span></span><br><span class="line"><span class="string">patrick-fore-hoxqcGUheeo-unsplash.jpg</span></span><br><span class="line"><span class="string">timothy-eberly-yuiJO6bvHi4-unsplash.jpg</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">## 一个数据流可以和另外一个数据流交互</span></span><br><span class="line">res1=subprocess.Popen(<span class="string">&#x27;ls ~/Downloads&#x27;</span>,shell=<span class="literal">True</span>,stdout=subprocess.PIPE)</span><br><span class="line">res=subprocess.Popen(<span class="string">&#x27;grep jpg$&#x27;</span>,shell=<span class="literal">True</span>,stdin=res1.stdout,stdout=subprocess.PIPE)</span><br><span class="line">print(res.stdout.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a target="_blank" rel="noopener" href="https://www.cnblogs.com/security-darren/p/4733368.html">Python多进程（1）——subprocess与Popen()</a></p>
<p><a target="_blank" rel="noopener" href="https://www.cnblogs.com/vamei/archive/2012/09/23/2698014.html">Python标准库06 子进程 (subprocess包)</a></p>
<p><a target="_blank" rel="noopener" href="https://c.isme.pub/2018/01/17/python-syscommand/">python模块-执行系统命令</a></p>

    
  </div>

</article>


   
  <div class="text-center donation">
    <div class="inner-donation">
      <span class="btn-donation">支持一下</span>
      <div class="donation-body">
        <div class="tip text-center">自愿投币</div>
        <ul>
        
          <li class="item">
            
              <span>支付宝扫一扫</span>
            
            <img src="https://hugo-blog-1256988836.cos.ap-chengdu.myqcloud.com/Blog/Images/%E4%BA%8C%E7%BB%B4%E7%A0%81.jpg" alt="">
          </li>
        
        </ul>
      </div>
    </div>
  </div>


   
  <div class="box-prev-next clearfix">
    <a class="show pull-left" href="/2019/09/19/next-themes-modify/">
        <i class="icon icon-angle-left"></i>
    </a>
    <a class="show pull-right" href="/graphlan">
        <i class="icon icon-angle-right"></i>
    </a>
  </div>




</div>


  <a id="backTop" class="back-top">
    <i class="icon-angle-up"></i>
  </a>




  <div class="modal" id="modal">
  <span id="cover" class="cover hide"></span>
  <div id="modal-dialog" class="modal-dialog hide-dialog">
    <div class="modal-header">
      <span id="close" class="btn-close">Close</span>
    </div>
    <hr>
    <div class="modal-body">
      <ul class="list-toolbox">
        
          <li class="item-toolbox">
            <a
              class="CIRCLE"
              href="/archives/"
              rel="noopener noreferrer"
              target="_self"
              >
              博客
            </a>
          </li>
        
          <li class="item-toolbox">
            <a
              class="CIRCLE"
              href="/category/"
              rel="noopener noreferrer"
              target="_self"
              >
              分类
            </a>
          </li>
        
          <li class="item-toolbox">
            <a
              class="CIRCLE"
              href="/tag/"
              rel="noopener noreferrer"
              target="_self"
              >
              标签
            </a>
          </li>
        
          <li class="item-toolbox">
            <a
              class="CIRCLE"
              href="/link/"
              rel="noopener noreferrer"
              target="_self"
              >
              荐读
            </a>
          </li>
        
          <li class="item-toolbox">
            <a
              class="CIRCLE"
              href="/about/"
              rel="noopener noreferrer"
              target="_self"
              >
              关于
            </a>
          </li>
        
      </ul>

    </div>
  </div>
</div>



  
      <div class="fexo-comments comments-post">
    

    

    
    

    

    
    

    

<!-- Gitalk评论插件通用代码 -->
<div id="gitalk-container"></div>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css">
<script src="https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js"></script>
<script src="//cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.js"></script>
<script>
const gitalk = new Gitalk({
  clientID: '0963ec29d0c3a87ab983',
  clientSecret: 'd9c867a5cb0ee1dc63198451aa8ba3c80d865af9',
  repo: 'fenghuji.github.io',
  owner: 'fenghuji',
  // 在这里设置一下截取前50个字符串, 这是因为 github 对 label 的长度有了要求, 如果超过
  // 50个字符串则会报错.
  // id: location.pathname.split('/').pop().substring(0, 49),
  id: md5(location.pathname),
  admin: ['fenghuji'],
  // facebook-like distraction free mode
  distractionFreeMode: false
})
gitalk.render('gitalk-container')
</script>
<!-- Gitalk代码结束 -->



  </div>

  

  <script type="text/javascript">
  function loadScript(url, callback) {
    var script = document.createElement('script')
    script.type = 'text/javascript';

    if (script.readyState) { //IE
      script.onreadystatechange = function() {
        if (script.readyState == 'loaded' ||
          script.readyState == 'complete') {
          script.onreadystatechange = null;
          callback();
        }
      };
    } else { //Others
      script.onload = function() {
        callback();
      };
    }

    script.src = url;
    document.getElementsByTagName('head')[0].appendChild(script);
  }

  window.onload = function() {
    loadScript('/js/bundle.js?235683', function() {
      // load success
    });
  }
</script>

<script src="/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05"></script><script>L2Dwidget.init({"pluginModelPath":"assets/","model":{"jsonPath":"/live2dw/assets/z16.model.json"},"display":{"position":"left","width":500,"height":1000},"mobile":{"show":false},"rect":"opacity:0.7","log":false,"pluginJsPath":"lib/","pluginRootPath":"live2dw/","tagMode":false});</script></body>
</html>

<canvas class="fireworks" style="position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;" ></canvas> 
<script type="text/javascript" src="//cdn.bootcss.com/animejs/2.2.0/anime.min.js"></script> 
<script type="text/javascript" src="/js/fireworks.js"></script>

